import MetaTrader5 as mt5
import logging
from datetime import datetime
import pytz
import time
import sys
import traceback


class MT5API:
    """
    MetaTrader 5 API wrapper for trading operations and market data retrieval.
    """

    def __init__(self, server, login, password, timeout_seconds=60, max_retries=3, retry_delay=5):
        """
        Initialize MT5API with connection parameters.

        Args:
            server (str): MT5 server address
            login (str): Account login
            password (str): Account password
            timeout_seconds (int): Connection timeout in seconds
            max_retries (int): Maximum number of connection attempts
            retry_delay (int): Delay between retry attempts in seconds
        """
        self.server = server
        self.login = login
        self.password = password
        self.timeout_seconds = timeout_seconds
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.logger = logging.getLogger(__name__)
        self.connected = False

        # Initialize MT5 connection
        self._initialize_connection()

    def _initialize_connection(self):
        """Initialize connection to MetaTrader 5 terminal."""
        self.connected = False
        
        for attempt in range(self.max_retries):
            try:
                self.logger.info(f"Connecting to MT5 (attempt {attempt+1}/{self.max_retries})")
                
                # Initialize MT5 library if not already initialized
                if not mt5.terminal_info():
                    if not mt5.initialize(timeout=self.timeout_seconds*1000):  # timeout in milliseconds
                        error = mt5.last_error()
                        self.logger.error(f"Failed to initialize MT5 (attempt {attempt+1}/{self.max_retries}): {error}")
                        if attempt < self.max_retries - 1:
                            self.logger.info(f"Retrying in {self.retry_delay} seconds...")
                            time.sleep(self.retry_delay)
                            continue
                        return

                # Login to the trading account
                authorized = mt5.login(
                    login=int(self.login),
                    password=self.password,
                    server=self.server
                )

                if not authorized:
                    error = mt5.last_error()
                    self.logger.error(f"Failed to login to MT5 account {self.login} (attempt {attempt+1}/{self.max_retries}): {error}")
                    if attempt < self.max_retries - 1:
                        self.logger.info(f"Retrying in {self.retry_delay} seconds...")
                        time.sleep(self.retry_delay)
                        continue
                    return

                # Verify that account info is accessible
                account_info = mt5.account_info()
                if not account_info:
                    self.logger.warning("Connected to MT5 but could not retrieve account info")
                else:
                    self.logger.info(
                        f"Connected to MT5: Server={self.server}, Account={self.login}, "
                        f"Balance={account_info.balance}, Equity={account_info.equity}"
                    )
                
                # Connection successful
                self.connected = True
                return
                
            except Exception as e:
                self.logger.error(f"Error initializing MT5 connection (attempt {attempt+1}/{self.max_retries}): {str(e)}")
                self.logger.debug(traceback.format_exc())
                if attempt < self.max_retries - 1:
                    self.logger.info(f"Retrying in {self.retry_delay} seconds...")
                    time.sleep(self.retry_delay)
                else:
                    self.logger.error("All connection attempts failed")
                    self.connected = False

    def _check_connection(self, max_retries=1):
        """
        Check if connection is active, attempt reconnect if not.
        
        Args:
            max_retries (int): Maximum number of reconnection attempts
            
        Returns:
            bool: True if connected, False otherwise
        """
        # First quickly check if we think we're connected
        if not self.connected:
            self.logger.warning("MT5 connection marked as disconnected, attempting to reconnect...")
            self._initialize_connection()
            return self.connected
        
        # Then verify with MT5 terminal
        try:
            terminal_info = mt5.terminal_info()
            if terminal_info is None:
                self.logger.warning("MT5 connection lost, attempting to reconnect...")
                self.connected = False
                self._initialize_connection()
            elif hasattr(terminal_info, 'connected') and not terminal_info.connected:
                self.logger.warning("MT5 terminal is not connected to broker, attempting to reconnect...")
                self.connected = False
                self._initialize_connection()
        except Exception as e:
            self.logger.error(f"Error checking MT5 connection: {str(e)}")
            self.connected = False
            self._initialize_connection()
            
        return self.connected

    def get_tick_data(self, symbol):
        """
        Get latest tick data for a symbol.

        Args:
            symbol (str): Trading symbol (e.g., 'EURUSD')

        Returns:
            dict or None: Tick data or None if failed
        """
        if not self._check_connection():
            self.logger.error(f"Cannot get tick data for {symbol}: Not connected")
            return None

        try:
            # Validate symbol format
            if not isinstance(symbol, str) or len(symbol) < 1:
                self.logger.error(f"Invalid symbol format: {symbol}")
                return None

            tick = mt5.symbol_info_tick(symbol)
            if tick is None:
                self.logger.error(f"Failed to get tick data for {symbol}: {mt5.last_error()}")
                return None

            tick_data = {
                'symbol': symbol,
                'timestamp': datetime.fromtimestamp(tick.time, tz=pytz.UTC).isoformat(),
                'bid': float(tick.bid) if hasattr(tick, 'bid') else 0.0,
                'ask': float(tick.ask) if hasattr(tick, 'ask') else 0.0,
                'last': float(tick.last) if hasattr(tick, 'last') else 0.0,
                'volume': float(tick.volume) if hasattr(tick, 'volume') else 0.0,
                'time': tick.time
            }
            return tick_data
        except Exception as e:
            self.logger.error(f"Error getting tick data for {symbol}: {str(e)}")
            return None

    def get_ohlc_data(self, symbol, timeframe, count):
        """
        Get OHLC data for a symbol.

        Args:
            symbol (str): Trading symbol
            timeframe (int): MT5 timeframe constant (e.g., mt5.TIMEFRAME_M1)
            count (int): Number of bars to retrieve

        Returns:
            list or None: List of OHLC dictionaries or None if failed
        """
        if not self._check_connection():
            self.logger.error(f"Cannot get OHLC data for {symbol}: Not connected")
            return None

        try:
            # Validate inputs
            if not isinstance(symbol, str) or len(symbol) < 1:
                self.logger.error(f"Invalid symbol format: {symbol}")
                return None
                
            if not isinstance(count, int) or count <= 0:
                self.logger.error(f"Invalid count parameter: {count}")
                return None
                
            # Attempt to get rates with retry
            rates = None
            for attempt in range(2):
                rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, count)
                if rates is not None and len(rates) > 0:
                    break
                if attempt < 1:
                    self.logger.warning(f"Retrying OHLC data retrieval for {symbol}")
                    time.sleep(0.5)
            
            if rates is None or len(rates) == 0:
                self.logger.error(f"Failed to get OHLC data for {symbol}: {mt5.last_error()}")
                return None

            ohlc_data = [
                {
                    'timestamp': datetime.fromtimestamp(rate['time'], tz=pytz.UTC).isoformat(),
                    'open': float(rate['open']),
                    'high': float(rate['high']),
                    'low': float(rate['low']),
                    'close': float(rate['close']),
                    'volume': float(rate['tick_volume']),
                    'spread': float(rate['spread']),
                    'real_volume': float(rate.get('real_volume', 0))
                }
                for rate in rates
            ]
            return ohlc_data
        except Exception as e:
            self.logger.error(f"Error getting OHLC data for {symbol}: {str(e)}")
            self.logger.debug(traceback.format_exc())
            return None

    def get_dom(self, symbol):
        """
        Get Depth of Market (DOM) data for a symbol.

        Args:
            symbol (str): Trading symbol

        Returns:
            list or None: List of DOM entries or None if failed
        """
        if not self._check_connection():
            self.logger.error(f"Cannot get DOM data for {symbol}: Not connected")
            return None

        try:
            # Validate symbol
            if not isinstance(symbol, str) or len(symbol) < 1:
                self.logger.error(f"Invalid symbol format: {symbol}")
                return None
                
            # Ensure market book is subscribed
            if not mt5.market_book_add(symbol):
                self.logger.error(f"Failed to subscribe to market book for {symbol}: {mt5.last_error()}")
                return None

            # Give some time for DOM data to update
            time.sleep(0.1)

            dom = mt5.market_book_get(symbol)
            if dom is None:
                self.logger.error(f"Failed to get DOM data for {symbol}: {mt5.last_error()}")
                mt5.market_book_release(symbol)
                return None

            dom_data = [
                {
                    'type': 'bid' if item.type == mt5.BOOK_TYPE_SELL else 'ask',
                    'price': float(item.price),
                    'volume': float(item.volume)
                }
                for item in dom
            ]

            # Release market book subscription
            mt5.market_book_release(symbol)

            return dom_data
        except Exception as e:
            self.logger.error(f"Error getting DOM data for {symbol}: {str(e)}")
            try:
                mt5.market_book_release(symbol)
            except:
                pass
            return None

    def order_send(self, request, max_retries=3, retry_delay=1.0):
        """
        Send a trading order to MT5 with retry capability.

        Args:
            request (dict): Order request parameters
            max_retries (int): Maximum number of retry attempts
            retry_delay (float): Delay between retries in seconds

        Returns:
            dict or None: Order result or None if failed
        """
        if not self._check_connection():
            self.logger.error("Cannot send order: Not connected")
            return None

        # Log order request
        symbol = request.get('symbol', 'Unknown')
        action_type = request.get('type', 'Unknown')
        volume = request.get('volume', 0)
        
        self.logger.info(f"Sending order: Symbol={symbol}, Type={action_type}, Volume={volume}")
        
        for attempt in range(max_retries):
            try:
                result = mt5.order_send(request)
                
                if result is None:
                    error = mt5.last_error()
                    self.logger.error(f"Order send failed (attempt {attempt+1}/{max_retries}): {error}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return None
                    
                if result.retcode != mt5.TRADE_RETCODE_DONE:
                    # Some retcodes indicate temporary issues that can be retried
                    retry_codes = [
                        mt5.TRADE_RETCODE_REQUOTE,
                        mt5.TRADE_RETCODE_TIMEOUT,
                        mt5.TRADE_RETCODE_INVALID_PRICE,
                        mt5.TRADE_RETCODE_ORDER_CHANGED,
                        mt5.TRADE_RETCODE_TOO_MANY_REQUESTS,
                        mt5.TRADE_RETCODE_TRADE_DISABLED,
                        mt5.TRADE_RETCODE_MARKET_CLOSED,
                        mt5.TRADE_RETCODE_NO_MONEY,
                        mt5.TRADE_RETCODE_PRICE_CHANGED,
                        mt5.TRADE_RETCODE_PRICE_OFF,
                        mt5.TRADE_RETCODE_CONNECTION
                    ]
                    
                    if result.retcode in retry_codes and attempt < max_retries - 1:
                        self.logger.warning(f"Temporary issue with order (attempt {attempt+1}/{max_retries}): {result.comment} (code: {result.retcode})")
                        time.sleep(retry_delay)
                        continue
                    else:
                        self.logger.error(f"Order send failed: {result.comment} (code: {result.retcode})")
                        return None

                # Order was successful
                order_result = {
                    'ticket': result.order,
                    'entry_price': result.price,
                    'volume': result.volume,
                    'request_id': result.request_id if hasattr(result, 'request_id') else None,
                    'retcode': result.retcode,
                    'comment': result.comment
                }
                self.logger.info(f"Order executed successfully: Ticket={result.order}, Price={result.price}")
                return order_result
                
            except Exception as e:
                self.logger.error(f"Error sending order (attempt {attempt+1}/{max_retries}): {str(e)}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
                else:
                    self.logger.error("All order attempts failed")
                    return None

    def positions_get(self, symbol=None, max_retries=2):
        """
        Get all open positions, optionally filtered by symbol.

        Args:
            symbol (str, optional): Symbol to filter positions
            max_retries (int): Maximum number of retry attempts

        Returns:
            list: List of position dictionaries
        """
        if not self._check_connection():
            self.logger.error("Cannot get positions: Not connected")
            return []

        for attempt in range(max_retries):
            try:
                # Get positions with retry capability
                if symbol:
                    positions = mt5.positions_get(symbol=symbol)
                else:
                    positions = mt5.positions_get()

                if positions is None:
                    error = mt5.last_error()
                    self.logger.error(f"Failed to get positions (attempt {attempt+1}/{max_retries}): {error}")
                    if attempt < max_retries - 1:
                        time.sleep(0.5)
                        continue
                    return []

                # Convert positions to dictionaries with safety checks
                position_list = []
                for pos in positions:
                    try:
                        position_dict = {
                            'ticket': pos.ticket,
                            'symbol': pos.symbol,
                            'type': pos.type,
                            'volume': float(pos.volume) if hasattr(pos, 'volume') else 0.0,
                            'price_open': float(pos.price_open) if hasattr(pos, 'price_open') else 0.0,
                            'price_current': float(pos.price_current) if hasattr(pos, 'price_current') else 0.0,
                            'profit': float(pos.profit) if hasattr(pos, 'profit') else 0.0,
                            'sl': float(pos.sl) if hasattr(pos, 'sl') and pos.sl != 0 else None,
                            'tp': float(pos.tp) if hasattr(pos, 'tp') and pos.tp != 0 else None,
                            'time': pos.time if hasattr(pos, 'time') else 0,
                            'comment': pos.comment if hasattr(pos, 'comment') else ''
                        }
                        position_list.append(position_dict)
                    except Exception as e:
                        self.logger.error(f"Error processing position data: {str(e)}")
                
                return position_list
                
            except Exception as e:
                self.logger.error(f"Error getting positions (attempt {attempt+1}/{max_retries}): {str(e)}")
                if attempt < max_retries - 1:
                    time.sleep(0.5)
                else:
                    return []

    def close_position(self, position_id, max_retries=3, retry_delay=1.0, deviation=10):
        """
        Close an open position by ticket ID.

        Args:
            position_id (int): Position ticket ID
            max_retries (int): Maximum number of retry attempts
            retry_delay (float): Delay between retries in seconds
            deviation (int): Maximum price deviation in points

        Returns:
            dict or None: Result of closing operation or None if failed
        """
        # Convert position_id to integer if it's a string
        try:
            position_id = int(position_id)
        except ValueError:
            self.logger.error(f"Invalid position ID format: {position_id}")
            return None
            
        if not self._check_connection():
            self.logger.error(f"Cannot close position {position_id}: Not connected")
            return None

        for attempt in range(max_retries):
            try:
                # Get position details
                positions = self.positions_get()
                position = next((pos for pos in positions if pos['ticket'] == position_id), None)
                
                if not position:
                    # Position might already be closed
                    self.logger.warning(f"Position {position_id} not found, it may already be closed")
                    
                    # Try to check recent deals to confirm if it was closed
                    from_date = datetime.now(pytz.UTC).replace(hour=0, minute=0, second=0, microsecond=0)
                    to_date = datetime.now(pytz.UTC)
                    recent_deals = self.get_historical_deals(from_date, to_date)
                    
                    for deal in recent_deals:
                        if deal.get('position_id') == position_id or deal.get('order') == position_id:
                            self.logger.info(f"Position {position_id} was already closed")
                            return {
                                'ticket': position_id,
                                'closed': True,
                                'profit': deal.get('profit', 0),
                                'price': deal.get('price', 0),
                                'already_closed': True
                            }
                    
                    return None

                symbol = position['symbol']
                volume = position['volume']
                position_type = position['type']

                # Determine closing action (reverse of position type)
                action = mt5.ORDER_TYPE_SELL if position_type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY

                # Get current market price
                tick = self.get_tick_data(symbol)
                if not tick:
                    self.logger.error(f"Attempt {attempt+1}/{max_retries}: Cannot get market price to close position {position_id}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return None

                price = tick['bid'] if action == mt5.ORDER_TYPE_SELL else tick['ask']

                # Prepare order request
                request = {
                    'action': mt5.TRADE_ACTION_DEAL,
                    'position': position_id,
                    'symbol': symbol,
                    'volume': volume,
                    'type': action,
                    'price': price,
                    'deviation': deviation,  # Allow for some price deviation
                    'magic': position.get('magic', 123456),
                    'comment': 'Close Position',
                    'type_time': mt5.ORDER_TIME_GTC
                }

                # Send the order
                self.logger.info(f"Attempt {attempt+1}/{max_retries}: Closing position {position_id} for {symbol}")
                result = mt5.order_send(request)
                
                # Check result
                if result is None:
                    error = mt5.last_error()
                    self.logger.error(f"Attempt {attempt+1}/{max_retries}: Failed to close position {position_id}: {error}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return None
                    
                if result.retcode != mt5.TRADE_RETCODE_DONE:
                    # Some retcodes indicate temporary issues that can be retried
                    retry_codes = [
                        mt5.TRADE_RETCODE_REQUOTE,
                        mt5.TRADE_RETCODE_TIMEOUT,
                        mt5.TRADE_RETCODE_INVALID_PRICE,
                        mt5.TRADE_RETCODE_ORDER_CHANGED,
                        mt5.TRADE_RETCODE_TOO_MANY_REQUESTS,
                        mt5.TRADE_RETCODE_TRADE_DISABLED,
                        mt5.TRADE_RETCODE_MARKET_CLOSED,
                        mt5.TRADE_RETCODE_NO_MONEY,
                        mt5.TRADE_RETCODE_PRICE_CHANGED,
                        mt5.TRADE_RETCODE_PRICE_OFF,
                        mt5.TRADE_RETCODE_CONNECTION
                    ]
                    
                    if result.retcode in retry_codes and attempt < max_retries - 1:
                        self.logger.warning(f"Attempt {attempt+1}/{max_retries}: Temporary issue closing position {position_id}: {result.comment} (code: {result.retcode})")
                        time.sleep(retry_delay)
                        continue
                    else:
                        self.logger.error(f"Failed to close position {position_id}: {result.comment} (code: {result.retcode})")
                        return None

                # Successfully closed
                close_result = {
                    'ticket': position_id,
                    'closed': True,
                    'profit': float(result.profit) if hasattr(result, 'profit') else 0.0,
                    'price': float(result.price),
                    'volume': float(result.volume)
                }
                self.logger.info(f"Position {position_id} closed successfully")
                return close_result
                
            except Exception as e:
                self.logger.error(f"Attempt {attempt+1}/{max_retries}: Error closing position {position_id}: {str(e)}")
                self.logger.debug(traceback.format_exc())
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
                else:
                    self.logger.error("All attempts to close position failed")
                    return None

    def modify_position(self, position_id, sl=None, tp=None, max_retries=3):
        """
        Modify stop loss and take profit for an open position.

        Args:
            position_id (int): Position ticket ID
            sl (float, optional): New stop loss price
            tp (float, optional): New take profit price
            max_retries (int): Maximum number of retry attempts

        Returns:
            bool: True if modification successful, False otherwise
        """
        try:
            position_id = int(position_id)
        except ValueError:
            self.logger.error(f"Invalid position ID format: {position_id}")
            return False
            
        if not self._check_connection():
            self.logger.error(f"Cannot modify position {position_id}: Not connected")
            return False

        if sl is None and tp is None:
            self.logger.warning(f"No changes specified for position {position_id}")
            return False

        for attempt in range(max_retries):
            try:
                positions = self.positions_get()
                position = next((pos for pos in positions if pos['ticket'] == position_id), None)
                if not position:
                    self.logger.error(f"Position {position_id} not found")
                    return False

                request = {
                    'action': mt5.TRADE_ACTION_SLTP,
                    'position': position_id,
                    'symbol': position['symbol'],
                    'sl': sl if sl is not None else position['sl'],
                    'tp': tp if tp is not None else position['tp']
                }

                self.logger.info(f"Attempt {attempt+1}/{max_retries}: Modifying position {position_id} SL/TP")
                result = mt5.order_send(request)
                
                if result is None:
                    error = mt5.last_error()
                    self.logger.error(f"Attempt {attempt+1}/{max_retries}: Failed to modify position {position_id}: {error}")
                    if attempt < max_retries - 1:
                        time.sleep(1)
                        continue
                    return False
                    
                if result.retcode != mt5.TRADE_RETCODE_DONE:
                    # Some retcodes indicate temporary issues that can be retried
                    retry_codes = [
                        mt5.TRADE_RETCODE_REQUOTE,
                        mt5.TRADE_RETCODE_TIMEOUT,
                        mt5.TRADE_RETCODE_ORDER_CHANGED,
                        mt5.TRADE_RETCODE_TOO_MANY_REQUESTS,
                        mt5.TRADE_RETCODE_CONNECTION
                    ]
                    
                    if result.retcode in retry_codes and attempt < max_retries - 1:
                        self.logger.warning(f"Attempt {attempt+1}/{max_retries}: Temporary issue modifying position {position_id}: {result.comment} (code: {result.retcode})")
                        time.sleep(1)
                        continue
                    else:
                        self.logger.error(f"Failed to modify position {position_id}: {result.comment} (code: {result.retcode})")
                        return False

                self.logger.info(f"Position {position_id} SL/TP modified successfully")
                return True
                
            except Exception as e:
                self.logger.error(f"Error modifying position {position_id} (attempt {attempt+1}/{max_retries}): {str(e)}")
                if attempt < max_retries - 1:
                    time.sleep(1)
                else:
                    return False

    def get_account_info(self):
        """
        Get current account information.

        Returns:
            dict: Account information
        """
        if not self._check_connection():
            self.logger.error("Cannot get account info: Not connected")
            return {}

        try:
            account = mt5.account_info()
            if account is None:
                self.logger.error(f"Failed to get account info: {mt5.last_error()}")
                return {}

            # Convert account info to dictionary with safety checks
            account_info = {
                'balance': float(account.balance) if hasattr(account, 'balance') else 0.0,
                'equity': float(account.equity) if hasattr(account, 'equity') else 0.0,
                'margin': float(account.margin) if hasattr(account, 'margin') else 0.0,
                'free_margin': float(account.margin_free) if hasattr(account, 'margin_free') else 0.0,
                'margin_level': float(account.margin_level) if hasattr(account, 'margin_level') else 0.0,
                'login': account.login if hasattr(account, 'login') else 0,
                'server': self.server,
                'currency': account.currency if hasattr(account, 'currency') else "",
                'leverage': account.leverage if hasattr(account, 'leverage') else 1,
                'positions_count': len(self.positions_get())
            }
            return account_info
            
        except Exception as e:
            self.logger.error(f"Error getting account info: {str(e)}")
            return {}

    def get_symbol_info(self, symbol):
        """
        Get symbol specifications.

        Args:
            symbol (str): Trading symbol

        Returns:
            dict: Symbol information
        """
        if not self._check_connection():
            self.logger.error(f"Cannot get symbol info for {symbol}: Not connected")
            return {}

        try:
            symbol_info = mt5.symbol_info(symbol)
            if symbol_info is None:
                self.logger.error(f"Failed to get symbol info for {symbol}: {mt5.last_error()}")
                return {}

            # Get more detailed information if available
            info = {
                'name': symbol,
                'digits': symbol_info.digits if hasattr(symbol_info, 'digits') else 5,
                'point': float(symbol_info.point) if hasattr(symbol_info, 'point') else 0.00001,
                'trade_tick_size': float(symbol_info.trade_tick_size) if hasattr(symbol_info, 'trade_tick_size') else 0.0,
                'trade_contract_size': float(symbol_info.trade_contract_size) if hasattr(symbol_info, 'trade_contract_size') else 100000,
                'volume_min': float(symbol_info.volume_min) if hasattr(symbol_info, 'volume_min') else 0.01,
                'volume_max': float(symbol_info.volume_max) if hasattr(symbol_info, 'volume_max') else 100.0,
                'volume_step': float(symbol_info.volume_step) if hasattr(symbol_info, 'volume_step') else 0.01,
                'spread': float(symbol_info.spread) if hasattr(symbol_info, 'spread') else 0,
                'currency_base': symbol_info.currency_base if hasattr(symbol_info, 'currency_base') else "",
                'currency_profit': symbol_info.currency_profit if hasattr(symbol_info, 'currency_profit') else "",
                'description': symbol_info.description if hasattr(symbol_info, 'description') else ""
            }
            return info
            
        except Exception as e:
            self.logger.error(f"Error getting symbol info for {symbol}: {str(e)}")
            return {}

    def get_historical_deals(self, from_date, to_date, symbol=None):
        """
        Get historical deals (closed trades).

        Args:
            from_date (datetime): Start date
            to_date (datetime): End date
            symbol (str, optional): Symbol to filter deals

        Returns:
            list: List of deal dictionaries
        """
        if not self._check_connection():
            self.logger.error("Cannot get historical deals: Not connected")
            return []

        try:
            # Validate dates
            if not isinstance(from_date, datetime) or not isinstance(to_date, datetime):
                self.logger.error("Invalid date format for historical deals")
                return []
                
            from_ts = int(from_date.timestamp())
            to_ts = int(to_date.timestamp())
            
            # Get deal history with retry
            deals = None
            for attempt in range(2):
                deals = mt5.history_deals_get(from_ts, to_ts, group=symbol)
                if deals is not None:
                    break
                if attempt < 1:
                    self.logger.warning(f"Retrying historical deals retrieval")
                    time.sleep(0.5)
            
            if deals is None:
                self.logger.error(f"Failed to get historical deals: {mt5.last_error()}")
                return []

            # Process deals with safety checks
            deal_list = []
            for deal in deals:
                try:
                    # Filter for completed deals
                    if symbol and deal.symbol != symbol:
                        continue
                        
                    deal_dict = {
                        'ticket': deal.ticket,
                        'order': deal.order,
                        'position_id': deal.position_id if hasattr(deal, 'position_id') else None,
                        'time': deal.time,
                        'time_str': datetime.fromtimestamp(deal.time, tz=pytz.UTC).isoformat(),
                        'type': deal.type,
                        'entry': deal.entry,
                        'symbol': deal.symbol,
                        'volume': float(deal.volume),
                        'price': float(deal.price),
                        'profit': float(deal.profit),
                        'commission': float(deal.commission) if hasattr(deal, 'commission') else 0.0,
                        'swap': float(deal.swap) if hasattr(deal, 'swap') else 0.0,
                        'fee': float(deal.fee) if hasattr(deal, 'fee') else 0.0,
                        'comment': deal.comment if hasattr(deal, 'comment') else ''
                    }
                    deal_list.append(deal_dict)
                except Exception as e:
                    self.logger.error(f"Error processing deal data: {str(e)}")
                    
            return deal_list
            
        except Exception as e:
            self.logger.error(f"Error getting historical deals: {str(e)}")
            self.logger.debug(traceback.format_exc())
            return []
            
    def shutdown(self):
        """Shutdown MT5 connection."""
        try:
            if self.connected:
                mt5.shutdown()
                self.connected = False
                self.logger.info("MT5 connection shut down")
        except Exception as e:
            self.logger.error(f"Error shutting down MT5 connection: {str(e)}")
            self.logger.debug(traceback.format_exc())